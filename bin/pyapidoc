#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Dead simple API documentation generation tool

Usage:
    pyapidoc [options] <module>

Options:
    -h, --help
    -d, --debug
    -t TPL, --template TPL
    -o OUT, --output OUT
    --filename FNAME
"""

import os
import sys
import logging
import inspect
import jinja2
from docopt import docopt


log = logging.getLogger('simpledoc')


def main():
    """Main function of the pyapidoc"""

    sys.path = [os.getcwd()] + sys.path
    log.debug('pwd: %s', os.getcwd())
    log.debug('path: %s', str(sys.path))

    if opt['--filename'] is not None:
        import imp
        mod = imp.load_source(opt['<module>'], opt['--filename'])
    else:
        try:
            mod = __import__(opt['<module>'])
        except Exception:
            log.error('Unable to import module %s', opt['<module>'])
            return

    out = dict()
    out['name'] = opt['<module>']
    out['doc'] = inspect.getdoc(mod)
    out['classes'] = get_classes(mod, out['name'])
    out['functions'] = get_functions(mod, out['name'])

    template = load_template(opt['--template'])

    parts = opt['--template'].split('.')
    ext = parts[-2]

    with open(os.path.join(opt['--output'], opt['<module>'] + '.' + ext), 'w') as f:
        f.write(template.render(module=out, footer=footer, trim_blocks=True, lstrip_block=True))


def get_classes(obj: object, module: str=None) -> list:
    """Get lisf ot classes of the given object, each class is represented
    by dictionary with fields: name, doc and functions, where function is 
    list of functions given by get_function
    """
    out = list()
    for cl in inspect.getmembers(obj, inspect.isclass):
        if cl[0] != "__class__" and not cl[0].startswith("_") and cl[1].__module__ == module:
            log.debug('Class: %s file: %s', cl[0], inspect.getfile(cl[1]))
            outcl = dict()
            outcl['name'] = cl[0]
            outcl['doc'] = inspect.getdoc(cl[1])
            outcl['functions'] = get_functions(cl[1], module)
            out.append(outcl)

    return out


def get_functions(obj: object, module: str=None) -> list:
    """Get list of function of given object, each function is represented
    by dictionary with fields: name, signature and doc. 
    """
    out = list()
    for fce in inspect.getmembers(obj, inspect.isfunction):
        if module is None or fce[1].__module__ == module:
            log.debug('Function: %s file: %s', fce[0], inspect.getfile(fce[1]))

            outfce = dict()
            outfce['name'] = fce[0]
            outfce['signature'] = str(inspect.signature(fce[1]))
            outfce['doc'] = inspect.getdoc(fce[1])
            out.append(outfce)

    return out


def load_template(name: str) -> jinja2.Template:
    """Load template given by name, or path. If name is given first current
    directory is searched then pyapidoc template directory.
    """

    if os.path.isfile(name):
        path = name
    else:
        dirname = os.path.dirname(__file__)
        path = os.path.join(dirname, '..', 'templates', name)

    log.debug('Template file path %s', path)
    if not os.path.isfile(path):
        log.error('Unable to find template %s', name)

    with open(path) as f:
        template = jinja2.Template(f.read())

    return template


footer = 'API documentation generated by [pyapidoc](https://github.com/liborw/pyapidoc).'

if __name__ == "__main__":
    opt = docopt(__doc__)
    logging.basicConfig(level='DEBUG' if opt['--debug'] else 'INFO')
    main()


